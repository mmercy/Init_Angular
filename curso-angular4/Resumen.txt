-Curso: Curso de Angular 5 - Desde cero hasta profesional.
-Instructor: Víctor Robles.
-Este curso es compatible con Angular 2 final, Angular 4 y Angular 5.
-
-Angular es el framework para JavaScript estándar para crear webs SPA. Es uno de los frameworks más populares para 
-desarrollar aplicaciones modernas y escalables en el lado del cliente. Si quieres ser desarrollador front-end o full-stack, 
-o incluso si ya te dedicas al desarrollo web, es casi obligatorio aprender Angular.
-
-Angular 2, Angular 4 y Angular 5 han dado un salto de calidad con respecto a la versiones anteriores del framework, como AngularJS. 
-Ahora utilizaremos TypeScript para definir nuestras clases, propiedades y métodos, el código es mucho más limpio y se ha mejorado 
-el funcionamiento general del framework.
-
-Al finalizar el curso serás capaz de desarrollar tus propias aplicaciones web SPA (Single Page Apps) con Angular y modificar 
-otras que ya estén programadas con este framework.
-
-Este curso está diseñado para que aprendas a desarrollar webapps en el cliente para el mundo real mediante ejemplos prácticos, 
-paso a paso y de forma fácil para que no te quedes con dudas.
-
-Se tratan desde los aspectos más básicos y sencillos hasta los más avanzados, por tanto no es necesario que sepas nada de 
-AngularJS, ni de Angular 2 para aprender a usarlo, aunque si que necesitarás saber JavaScript y HTML para aprovechar al 100% este curso.
-
-Abordaremos el desarrollo de las aplicaciones partiendo desde cero, desde la creación de los componentes necesarios, 
-uso de rutas y servicios, creación y consumo de servicios REST (mediante un API REST) con el componente HTTP de 
-Angular 4 y 5, hasta la creación y validación de formularios, entre otras cosas.
-
-¿Cuáles son los requisitos?
-
-    HTML y CSS básico
-    JavaScript básico
-    NO es necesario saber nada de AngularJS, Angular 1, Angular 2, Angular 4, Angular 5 y tampoco de TypeScript
-
-¿Qué voy a aprender en este curso?
-
-    Dominar Angular 4 y Angular 5
-    Dominar TypeScript dentro Angular
-    Desarrollar aplicaciones web SPA
-    Mejorar la capacidad de adaptación a otros frameworks JavaScript
-    Aumentar las posibilidades laborales como desarrollador
-    Crear aplicaciones web modernas con Angular 5, Angular 4 y Angular 2
-
-¿A quién está dirigido?
-
-    Desarrolladores web
-    Estudiantes de informática
-    Estudiantes de ingenieria o ciclos formativos
-    Personas interesadas en el desarrollo web
-    Interesados en el desarrollo front-end
-    Interesados en el mundo de AngularJS, Angular 2 y Angular 4
-
-
---------------------------------------------------------------------------------------------------------------------
Angular 4.
1. Para Angular se requiere tener instalada una terminal de comandos.
2. Instalar Node.JS
3. Para instalar Angular
* Dentro de la carpeta donde se tenga.
	- Lanzar comando: npm install
		* npm es el gestor de dependencias de Node.js
	- Lanzar comando: npm start
		* como resultado se lanza el navegador con un HELLO ANGULAR
		El mensaje de HELLO ANGULAR se encuentra en el archivo app.component.ts en la carpeta 
		DirInstalacionAngular/src/app/ al hacer modificaciones en ese archivo en la consola se vera
		como se recompilar y al verlo en el navegador se veran los cambios.
4. Instalar Angular CLI ( Permite mas facil el proceso de Angular y agiliza el inicio de un proyecto).

		


		

Node.JS
Es una plataforma o framework
Nos permite desarrollo de aplicaciones del lado del servidor, permite trabajar con JavaScript.
Hay que descargarlo e instalarlo

Angular CLI
	Permite mas facil el proceso de Angular y agiliza el trabajo de un proyecto con Angular.
	Para instalarlo en la consola de comandod:
		npm install -g angular-cli
	Si ya se tiene instalado pero se quiere desinstalar e instalar
		npm uninstall -g @angular/cli		------Desinstala
		npm cache clean						------Limpia el cache del paquete
		npm install -g angular-cli o npm install -g @angular/cli@latest 		-----Son equivalentes
	
	Para generar un proyecto:
	* Desde consola comandos ubicarse directorio donde se quiera generar el proyecto
	* Ejecutar: ng new curso-angular4 (nombreProyecto)
	* Para ejecutar el proyecto: npm start
		ng serve 			-------- Ejecutar en el servidor
		Se puede validar en la URL: http://localhost:4200/
	
	* Importar proyecto en editor de texto.
		El editor usado es SublimeText
		* File -> Open Folder -> seleccionar carpeta del proyecto
		* Para que almacene el proyecto en SublimeText : 
			Menu->Project -> Save Project as -> (Seleccionar directorio proyecto) -> guardar con el nombreProyecto
	
	
	* Para empezar a trabajar con el proyecto
		* Ubicarse en el directorio del proyecto
		* Ejecutar: npm start
	
	Para que Sublime Text nos reconozca el lenguaje TypeScript y 
		nos coloree el código correctamente, descargar el paquete:
		https://github.com/Microsoft/TypeScript-Sublime-Plugin

		Abrir Sublime y en el menú Preferences -> Browser Packages, esto nos abrirá la carpeta 
		donde están los paquetes de sublime, crear el directorio TypeScript 
		y copiar dentro los ficheros TypeScript.tmLanguage y TypeScriptReact.tmLanguage 
		del paquete que hemos descargado antes.
	
	-----------------------------------------------------------------------------------------------
	Analisis de estructura de ficheros de Angular
	* Directorio e2e : configuraciones de framwork y de typescript (No se modifica)
	* Directorio node_modules: 	directorio donde se guardan todas las dependencias, guarda framework y todos los paquetes necesarios
		para que el framework y el proyecto funcionen.
	* Directorio src: es el directorio que se estara modificando
		Archivo: .angular-cli.json: configuracion de Angular CLI
		Archivo editorconfig : configuraciones de codificacion de caracteres, etc. (configuraciones de editor)
		Archivo gitignore: ignorar archivos en el git
		Archivo karma.conf.js : es para hacer test.
		Archivo package.json : son dependencias y librerias que necesita el proyecto.
		Archivo protactor.config.js: configuraciones del framework
		Archivo tsconfig.json : configuracion de typescript
		Archivo tslint.json : configuracion de typescript
		Archivos tsconfig, typing: mas configuraciones de typescript.
		Directorio app:
			app.module.ts : modulo principal de la aplicacion.
			app.component.ts : componente principal.
			app.component.spec.ts : detalles del compilador.
			app.component.html : plantilla de app.component.css
			app.component.css : estilos
	-----------------------------------------------------------------------------------------------
	Cuando se requiere eliminar un proyecto generado
	* Ejecutar: rm -rf curso-angular4(nombreProyecto)

	
	===============================================================================================
	Componentes que forman Angular.
	
	COMPONENTES
		Un componente al final va a controlar un trozo de pantalla o de la vista. 
		Todo lo que se puede ver en pantalla es controlado y gestionado por este tipo de elementos.
		La lógica de un componente dentro una clase en Angular 2 es que da soporte a una 
		vista interactuando con ella a través de un API con propiedades y métodos.
		El componente hace de mediador entre la vista a través de la plantilla y 
		la lógica de la app donde se incluirá el modelo de datos, es decir una especie de controlador.
			
	PLANTILLA
		Las plantillas van a definir la vista de los componentes. 
		Son htmls y tienen sintaxis especial de Angular. Trabajando con el databinding y las directivas.
	
	
	DECORADORES Y METADATOS
		Con los decoradores(patrón de diseño) vamos a configurar dinamicamente atributos/metadatos de las clases y componentes.
		Los metadatos van a describir a las clases pero también describen relaciones, por ejemplo si tenemos un 
		componente y una plantilla el metadato se va a encargar de decirle a Angular que ese componente y esa 
		plantilla van juntos, entre otras muchas cosas.
	
	SERVICIOS
		Son clases con un objetivo claro, facilita la reutilización, son un tipo de 
		componente dentro de la arquitectura de Angular 2 y mediante la inyección 
		de dependencias los podemos usar en otros componentes principales digamos.


	PROVIDERS
		Son servicios que nos proveen de datos o funcionalidades mediante sus métodos. 
		Existen providers/servicios propios de Angular o creados por nosotros mismos.
	
	
	
	DIRECTIVAS
		Son funcionalidades aplicables al DOM y a los elementos HTML en las plantillas de un componente.
		Por ejemplo una directiva puede servir para controlar que un div se muestre o no o recorrer un 
		array en la vista (directivas estructurales, estructuras condicionales y de control) o incluso 
		también puede servir para darle una un estilo u otro a un elemento del HTML o también para 
		interactuar con el modelo de datos del componente. 
		Básicamente son nuevos atributos para aplicarle a cualquier cosa en nuestra plantilla/vista.
	
	
	===============================================================================================
	app.component.ts
		Tiene import
		Provee un decorador, un decorador da funcionalidad a la clase.
		etiqueta selector : indica el nombre que se le dara al componente, el nombre del componente debe tener su plantilla.
		etiqueta templateURL : asigna un una vista o una platilla de un archivo html al componente.
		etiqueta styleUrls : definicion de archivos de estilo.
	
		Nota: el component.ts  tiene el componente y la clase que da la funcionalidad, 
		el component.html tiene etiquetas a de lo que se mostrara (que estan en una clase)
		el component.ts tiene la clase que usa component.html
		el component.ts  -> component.html -> component.ts .
		Todos los componentes deben de estar registrados en app.module.ts, esto es en declarations[]
	
	===============================================================================================
	CREAR COMPONENTES
	Se debe crear un archivo extension .ts (typescript)
	Y el nombre del archivo deber seguir la siguiente nomenclatura nombreArchivo.component.ts
	
	Debe tener un import del modulo component.
	Definicion del componente con @Component.
	Para que un template muestre el valor de un atributo de la clase se usa la doble llave.
	Ejemplo:	<h2>{{nombre_componente}} </h2>
				<p> {{listado_fruta}} </p2>
	Donde esos valores se encuentran en:
	export class FrutaComponent{
		public nombre_componente = 'Componente Fruta';
		public listado_fruta = ' Naranja, Manzana, Pera y Sandia'
	}
	
	
	Se debe registrar el componente en app.module.ts
	* Se importa el componente.
		Ejemplo: import{ FrutaComponent } from './fruta/fruta.component';
			Donde fruta es un directorio dentro de src/app/
	* Se agrega en las declaraciones
		Ejemplo: declarations: [ AppComponent, FrutaComponent ]
	
	
	===============================================================================================
	
	
	

CMDER
Es un .exe gestor de dependencias.
===============================================================================================
	
TYPESCRIPT
	Angular 4 usa typescript 2.2
	Es un subconjunto de javaScript.
	es un lenguaje interpretado sus archivos tienen extension .ts.
	Todo lo que se escribe en typescript se transforma en javaScript para que 
	todos los navegadores lo interpreten.
	--------------------------------------------------------------------------------
	VARIABLES Y TIPOS DE DATOS.
	No toma en cuenta el public y el private en typescript (se salta la visibilidad),
	aunque se ponga privado se tiene acceso desde el html.
	Un arreglo que permite cualquier tipo es de la siguiente forma:
	public trabajos:Array<any> = ['Carpintero', 'Albañil', 'Fontanero'];
	El tipo "any" permite cualquier tipo de dato.
	
	Importante: cuando se quiere imprimir una variable no debe tener espacios 
		entre las llaves, porque marcaria error. Ejemplo {{mayorDeEdad}} -- ok
	--------------------------------------------------------------------------------
	CONSTRUCTOR Y METODOS
	Para poder acceder a una variable de la clase desde el constructor se debe poner
	el operador this.
	El metodo ngOnInit es el metodo que se ejecuta inmediatamente despues del constructor.
	--------------------------------------------------------------------------------
	DIFERENCIAS ENTRE DEFINIR VARIABLES CON LET O VAR.
	cuando se declaran con let solo se puede usar dentro del bloque que se declare,
	es como tipo de variable local.
	una variable declarada con var es de manera global, tiene mas alcance.

	--------------------------------------------------------------------------------
	GENERACION DE MODELOS EN ANGULAR.
	La forma de definir es:
	export class Empleado {.....} el archivo debe terminar en .ts
	Se puede declarar e inicializar en el constructor.
	--------------------------------------------------------------------------------
	DIRECTIVAS
	Son atributos html que tienen una funcionalidad en la vista.
	Hay diferentes tipos de directivas.
	<!-- directiva para condicion IF -->
	<ul *ngIf="trabajador_externo==false">
	<!-- directiva ngFor para iteraciones-->
	Ejemplo: <li *ngFor="let empleado of trabajadores; let i=index">
		Recorrera la variable trabajadores asignandosela a empleado, el indice de la iteracion lo guarda en i.
	<!-- Directiva ngSwitch para Switch y ngStyle para los estilos -->
	Ejemplo:: <ul [ngSwitch]="color">   Toma como condicion el valor de color.
	<li *ngSwitchCase="'red'"> En caso de que la variable a evaluar se igual a 'red'.
	[ngStyle]="{'background':color, 'color':'white', 'padding':'20px'}" aplica el estilo indicado al elemento html.
	<!---- Two-way binding ---->
	Cuando las propiedades en el modelo se actualizan, también lo hace la UI.
     Cuando los elementos de la interfaz de usuario se actualizan, los cambios se propagan nuevamente al modelo.
	<!-- Directiva NgClas -->
	 <strong [ngClass]="['fondoAzul', 'letraGrande']">{{color_seleccionado}}</strong>, donde fondoAzul y letraGrande estan en un .css.
	
	--------------------------------------------------------------------------------
	
	
	CONFIGURACION DE ROUTING
	Para asignar a una URL concreta un componente concreto y mostrarlo en una parte de la web.
	En index.html, la etiqueta fundamental es <base href="/"> SIN ESTA ETIQUETA NO FUNCIONA.
	Pasos:
	* Generacion de archivo routing.ts
	* Importar modulos necesarios: ModuleWithProviders
	* Importar los componentes creados.
	* Crear constante de Routes para configurar las rutas.
	* declarar constante de ModuleWithProviders para que tome todas las rutas que declaro antes.
	* Modificar el app.module para importar las constantes del archivo routing.ts
	* agregar en el imports y providers de .module.ts las constantes correspondientes
		Ejemplo:
		 imports: [..otros imports., routing],
		 providers: [appRoutingProviders],
		** Route Outlet: es un componente que carga dentro de una etiqueta el componente correspondiente a la URL.
	* Modificar el app.component.html agregando la etiqueta <router-outlet></router-outlet> 
		* como funciona: <router-outlet></router-outlet> dentro de esa etiqueta carga el framework carga el componente correspondiente a las url's.
	
	--------------------------------------------------------------------------------------
	routerLink, permite crear link hacia una URL.
	routerLinkActive, para marcar algun elemento seleccionado.
	
	RUTAS Y PARAMETROS POR LA URL.
	Para pasar parametros en un URL se tiene que modificar app.routing.ts
	En la creacion de rutas en el path se le pone el nombre que se le pondra al parametro.
		{path:'contacto/:page', component:ContactoComponent}, //nombre del parametro
	En el constructor del componente de debe agregar ActivatedRoute:
		Ejem: 
		importar: import {Router, ActivatedRoute, Params} from '@angular/router';
		constructor(private _route:ActivatedRoute,private _router:Router ){}
	Para recoger el parametro de la URL
		en el metodo ngOnInit
		//Recorrer los parametros
		this._route.params.forEach(function(params:Params){
		  this.parametro = params['page'];
		});
		Donde params['page'] es el nombre que se le puso como parametro 
		Ese tipo de funcion declarada asi: function(params:Params)
		es una funcion de calva.
	
	De la gasolineria una cuadra arriba. arles -- 75, agua incluida (buffet viernes)
	NOTA: NO PONER COMENTARIOS AL FINAL DE LINEA EN EL app.routing.ts
		Si se hace no tomara en cuenta el path.
	//Creacion de las rutas.
	const appRoutes: Routes = [
	  {path: '', component: HomeComponent  }, //path vacio --------INCORRECTO
	  {path:'empleado', component: EmpleadoComponent},
	  {path:'contacto', component:ContactoComponent},
	  {path:'contacto/:page', component:ContactoComponent}
	];


	REDIRECCIONES CON ROUTE
	Para redirigir se utiliza el metodo navigate del objeto tipo Router.
	Ejemplo: 
		public parametro ¨= 'Parametro a enviar'; //Parametro a enviar por la URL
		public path ¨= '/contacto'; //Path a donde se redireccionara. 
		this._router.navigate([path, parametro]);
		O sin parametro
		this._router.navigate([path]);
	
	--------------------------------------------------------------------------------------
							SERVICIOS
	--------------------------------------------------------------------------------------
	Se recomienda tener una carpeta para los servicios.
	Para generar un service, se debe importar al Decorador 'Injectable'.
		import {Injectable} from '@angular/core';
	
	Para definir la clase, ejemplo:
		@Injectable()
		export class RopaService{....}
	La capa de servicios es para contener la logica de negocio.
	
	*En un Array la forma de agregar el con push, y para eliminar es splice.
	
	--------------------------------------------------------------------------------------
							PIPES.
	--------------------------------------------------------------------------------------
	Los pipes, tuberias o filtros son pequeñas funciones que nos sirven para realizar
	alguna tarea en nuestra vista o plantilla de angular.
	Ejemplo:
		* Convertir fecha, convertir un texto o un dato a algo o procesar algun
			tipo de informacion en la vista.
			Ejemplo pipe de fecha: {{fecha|date:'dd/MM/yyyy'}}
			Ejemplo para caracteres: {{nombre | lowercase}}
	--------------------------------------------------------------------------------------
	PIPES PERSONALIZADOS
	* Crear una carpeta pipe
	* Generar un archivo .pipe.ts
		Dentro del archivo tener
			import {Pipe, PipeTransform} from '@angular/core';
			@Pipe({name: 'conversor'})
			Donde 'conversor' es el nombre del pipe.
	* Modificar el app.module.ts
		Agregar el pipe en declarations, e importarlo en dicho archivo.
		Ejemplo de usar pipe:
		<p>Forma de usar una Pipe. {{5 | conversor : 7}}</p>
		Donde 'conversor' es nombre del pipe.
		Y recibe 2 parametros que son 5 y 7.
	--------------------------------------------------------------------------------------
							FORMULARIO.
	--------------------------------------------------------------------------------------
	Se crea un archivo html
	<form #formCoche="ngForm" (ngSubmit) ="onSubmit()">
		Donde #formCoche es el nombre del formulario.
		"onSubmit()" es el metodo que tendra la logica que requiere el formulario.
	Para asignarle un nombre a un input
		<input type="text" name="nombre" #nombre="ngModel" [(ngModel)]="coche.nombre" required>
		Donde [(ngModel)]="coche.nombre"  es el campo del Modelo al que le seteara el valor
		
	Las validaciones de un formulario las hace con html5.
		Ejemplo de validacion y msg a mostrar en caso de que no cumpla.
		<span *ngIf="color.touched && !color.valid" >
			El color del coche es incorrecto!!.
		</span>
	--------------------------------------------------------------------------------------
							SERVICIOS, HTTP Y AJAX.
	--------------------------------------------------------------------------------------
	Generacion de servicios para hacer peticiones HTTP.
		Importar el modulo Injectable.
		Importar modulos de HTTP, Response y Headers.
		Importar librerias (Para poder mapear las respuestas.):
			import 'rxjs/add/operator/map';
			import {Observable} from 'rxjs/Observable';
	
	Hacer peticiones HTTP y Ajax
		* Utilizar una API generica de la red.
		* Utilizaremos JSONPlaceholder. https://jsonplaceholder.typicode.com/
		Para poder hacer peticiones Ajax se debe tener un objeto tipo HTTP en el servicio.
		Para hacer una peticion GET, se debe usar el objeto HTTp y para mapear la respuesta es con el metodo map,
			con una funcion => recoger los parametros.
		 this._http.get(this.url).map(res => res.json());
		 Donde res.json devuelve una coleccion de objetos usables.
		Para poder capturar la respuesta del servicio, se debe utilizar el metodo suscribe, para suscribirse al Observable
			y recoger el resultado o el error, segun sea el caso.
				this._peticionesService.getArticulos().subscribe(
				  result =>{
					this.articulos = result;
					if(!this.articulos){
					  console.log("Error en el servidor");
					}
					console.log(result);
				  },
				  error=>{
					var errorMessage = <any> error;
					console.log(errorMessage);
				  }
				);
		
	--------------------------------------------------------------------------------------
							DESARROLLAR APLICACION WEB COMPLETA
	--------------------------------------------------------------------------------------
	- Generacion e instalacion de aplicacion base Angular.
	- Descargar Bootstrap
	- Para incluir bootstrap en el proyecto es necesario copiar la carpeta de bootstrap en el directorio
		curso-angular4-webapp\src\assets		Donde curso-angular4-webapp es el nombre del proyecto.
		Ejemplo: curso-angular4-webapp\src\assets\bootstrap
	- Dado que Bootstrap necesita de Jquery, descargar Jquery.
		Descargar el archivo de JQuery en la ruta:
		curso-angular4-webapp\src\assets
		Ejemplo:curso-angular4-webapp\src\assets\jquery.min.js
		
		Se deben de agregar la siguientes lineas en el index.html de la aplicacion web.
		<!-- JQuery -->
		<script type="text/javascript"  src="assets/jquery.min.js" ></script>

		<!-- Bootstrap -->
		<link rel="stylesheet" href="assets/bootstrap/css/bootstrap-theme.min.css"
		<script type="text/javascript"  src="assets/bootstrap/js/bootstrap.min.js" ></script>
		
		* Esto es para incluir Bootstrap en la aplicación.
		* PicPink es una herramienta que permite identificar un color de alguna imagen en pantalla.
	- Para aplicacion de estilos se debe generar el archivo .css en el directorio assets del proyecto.

	- Aplicacion de estilos para navegacion y el footer.
		
	
			
		
	
			
NOTA:
En caso de que marque error al generar un nuevo proyecto de debe desinstalar node 
	y Angular e instalar todo nuevamente.


 
